{"ast":null,"code":"var _jsxFileName = \"/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/GraphComponent.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  farmData\n}) => {\n  if (!Array.isArray(farmData) || farmData.length === 0) {\n    console.log(\"GraphComponent: No farmData available for graph.\");\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading graph data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Define the cutoff time for the last 30 minutes\n  const now = new Date();\n  const cutoffTime = new Date(now.getTime() - 30 * 60 * 1000); // 30 minutes ago\n\n  // Filter farmData to include only data points from the last 30 minutes\n  const recentData = farmData.filter(data => {\n    const dataTime = new Date(data.timestamp);\n    console.log(`Timestamp: ${data.timestamp}, Parsed: ${dataTime}, Cutoff: ${cutoffTime}`);\n    return dataTime >= cutoffTime;\n  });\n  if (recentData.length === 0) {\n    console.log(\"GraphComponent: No recent data available within the last 30 minutes.\");\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available for the past 30 minutes.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Process filtered data for the graph\n  const timestamps = recentData.map(data => new Date(data.timestamp).toLocaleTimeString());\n  const temperatures = recentData.map(data => data.temperature);\n  const soilMoistures = recentData.map(data => data.soilMoisture);\n  const humidities = recentData.map(data => data.humidity);\n  const data = {\n    labels: timestamps,\n    datasets: [{\n      label: 'Temperature (°C)',\n      data: temperatures,\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.2)'\n    }, {\n      label: 'Soil Moisture (%)',\n      data: soilMoistures,\n      borderColor: 'rgb(54, 162, 235)',\n      backgroundColor: 'rgba(54, 162, 235, 0.2)'\n    }, {\n      label: 'Humidity (%)',\n      data: humidities,\n      borderColor: 'rgb(75, 192, 192)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Farm Data Over Time (Last 30 Minutes)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","Line","jsxDEV","_jsxDEV","GraphComponent","farmData","Array","isArray","length","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","now","Date","cutoffTime","getTime","recentData","filter","data","dataTime","timestamp","timestamps","map","toLocaleTimeString","temperatures","temperature","soilMoistures","soilMoisture","humidities","humidity","labels","datasets","label","borderColor","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/GraphComponent.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst GraphComponent = ({ farmData }) => {\n  if (!Array.isArray(farmData) || farmData.length === 0) {\n    console.log(\"GraphComponent: No farmData available for graph.\");\n    return <p>Loading graph data...</p>;\n  }\n\n  // Define the cutoff time for the last 30 minutes\n  const now = new Date();\n  const cutoffTime = new Date(now.getTime() - 30 * 60 * 1000); // 30 minutes ago\n\n  // Filter farmData to include only data points from the last 30 minutes\n  const recentData = farmData.filter(data => {\n    const dataTime = new Date(data.timestamp);\n    console.log(`Timestamp: ${data.timestamp}, Parsed: ${dataTime}, Cutoff: ${cutoffTime}`);\n    return dataTime >= cutoffTime;\n  });\n\n  if (recentData.length === 0) {\n    console.log(\"GraphComponent: No recent data available within the last 30 minutes.\");\n    return <p>No data available for the past 30 minutes.</p>;\n  }\n\n  // Process filtered data for the graph\n  const timestamps = recentData.map(data => new Date(data.timestamp).toLocaleTimeString());\n  const temperatures = recentData.map(data => data.temperature);\n  const soilMoistures = recentData.map(data => data.soilMoisture);\n  const humidities = recentData.map(data => data.humidity);\n\n  const data = {\n    labels: timestamps,\n    datasets: [\n      {\n        label: 'Temperature (°C)',\n        data: temperatures,\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n      },\n      {\n        label: 'Soil Moisture (%)',\n        data: soilMoistures,\n        borderColor: 'rgb(54, 162, 235)',\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n      },\n      {\n        label: 'Humidity (%)',\n        data: humidities,\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <h3>Farm Data Over Time (Last 30 Minutes)</h3>\n      <Line data={data} />\n    </div>\n  );\n};\n\nexport default GraphComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}