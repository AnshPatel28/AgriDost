{"ast":null,"code":"var _jsxFileName = \"/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/FarmDataChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, TimeScale, Title, Tooltip, Legend, PointElement } from 'chart.js';\nimport 'chartjs-adapter-date-fns'; // For handling time scales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, CategoryScale, LinearScale, TimeScale, Title, Tooltip, Legend, PointElement);\nconst FarmDataChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n\n  // Function to fetch data from the backend API\n  const fetchChartData = async () => {\n    try {\n      const userId = '6510f9bcf5a1a527b56a23e7'; // Example user ID, replace it as necessary\n      const response = await fetch(`/api/farm/${userId}/past-two-days`); // Updated API endpoint\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const feeds = await response.json(); // Directly parse the response as JSON\n\n      // Mapping the fields to the chart data\n      const temperatureData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        // Assuming `timestamp` is the correct field for time\n        y: parseFloat(feed.temperature) // Assuming `temperature` is the correct field\n      }));\n      const soilMoistureData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: parseFloat(feed.soilMoisture) // Assuming `soilMoisture` is the correct field\n      }));\n      const humidityData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: parseFloat(feed.humidity) // Assuming `humidity` is the correct field\n      }));\n      const motionDetectionData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: feed.motionDetected ? 1 : 0 // Assuming `motionDetected` is a boolean\n      }));\n\n      // Set the chart data state\n      setChartData({\n        datasets: [{\n          label: 'Temperature',\n          data: temperatureData,\n          borderColor: 'rgba(255, 99, 132, 1)',\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderWidth: 1\n        }, {\n          label: 'Soil Moisture',\n          data: soilMoistureData,\n          borderColor: 'rgba(54, 162, 235, 1)',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderWidth: 1\n        }, {\n          label: 'Humidity',\n          data: humidityData,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderWidth: 1\n        }, {\n          label: 'Motion Detection',\n          data: motionDetectionData,\n          borderColor: 'rgba(255, 159, 64, 1)',\n          backgroundColor: 'rgba(255, 159, 64, 0.2)',\n          borderWidth: 1,\n          yAxisID: 'y1'\n        }]\n      });\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchChartData(); // Fetch chart data when the component mounts\n  }, []);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y;\n            }\n            return label;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'hour',\n          // Show hourly data\n          tooltipFormat: 'MMM d, h:mm a'\n        },\n        title: {\n          display: true,\n          text: 'Time'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Value'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(FarmDataChart, \"w9TGTcQ41t1STf/TAA9S8/0Wwyc=\");\n_c = FarmDataChart;\nexport default FarmDataChart;\nvar _c;\n$RefreshReg$(_c, \"FarmDataChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","LineElement","CategoryScale","LinearScale","TimeScale","Title","Tooltip","Legend","PointElement","jsxDEV","_jsxDEV","register","FarmDataChart","_s","chartData","setChartData","datasets","fetchChartData","userId","response","fetch","ok","Error","status","feeds","json","temperatureData","map","feed","x","Date","timestamp","y","parseFloat","temperature","soilMoistureData","soilMoisture","humidityData","humidity","motionDetectionData","motionDetected","label","data","borderColor","backgroundColor","borderWidth","yAxisID","error","console","options","responsive","plugins","legend","position","tooltip","callbacks","context","dataset","parsed","scales","type","time","unit","tooltipFormat","title","display","text","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/FarmDataChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, TimeScale, Title, Tooltip, Legend, PointElement } from 'chart.js';\nimport 'chartjs-adapter-date-fns'; // For handling time scales\n\nChartJS.register(LineElement, CategoryScale, LinearScale, TimeScale, Title, Tooltip, Legend, PointElement);\n\nconst FarmDataChart = () => {\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n\n  // Function to fetch data from the backend API\n  const fetchChartData = async () => {\n    try {\n      const userId = '6510f9bcf5a1a527b56a23e7'; // Example user ID, replace it as necessary\n      const response = await fetch(`/api/farm/${userId}/past-two-days`); // Updated API endpoint\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const feeds = await response.json(); // Directly parse the response as JSON\n\n      // Mapping the fields to the chart data\n      const temperatureData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),  // Assuming `timestamp` is the correct field for time\n        y: parseFloat(feed.temperature)  // Assuming `temperature` is the correct field\n      }));\n\n      const soilMoistureData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: parseFloat(feed.soilMoisture)  // Assuming `soilMoisture` is the correct field\n      }));\n\n      const humidityData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: parseFloat(feed.humidity)  // Assuming `humidity` is the correct field\n      }));\n\n      const motionDetectionData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: feed.motionDetected ? 1 : 0  // Assuming `motionDetected` is a boolean\n      }));\n\n      // Set the chart data state\n      setChartData({\n        datasets: [\n          {\n            label: 'Temperature',\n            data: temperatureData,\n            borderColor: 'rgba(255, 99, 132, 1)',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderWidth: 1\n          },\n          {\n            label: 'Soil Moisture',\n            data: soilMoistureData,\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderWidth: 1\n          },\n          {\n            label: 'Humidity',\n            data: humidityData,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderWidth: 1\n          },\n          {\n            label: 'Motion Detection',\n            data: motionDetectionData,\n            borderColor: 'rgba(255, 159, 64, 1)',\n            backgroundColor: 'rgba(255, 159, 64, 0.2)',\n            borderWidth: 1,\n            yAxisID: 'y1'\n          }\n        ]\n      });\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchChartData(); // Fetch chart data when the component mounts\n  }, []);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y;\n            }\n            return label;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'hour', // Show hourly data\n          tooltipFormat: 'MMM d, h:mm a',\n        },\n        title: {\n          display: true,\n          text: 'Time'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Value'\n        }\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Line\n        options={options}\n        data={chartData}\n      />\n    </div>\n  );\n};\n\nexport default FarmDataChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}