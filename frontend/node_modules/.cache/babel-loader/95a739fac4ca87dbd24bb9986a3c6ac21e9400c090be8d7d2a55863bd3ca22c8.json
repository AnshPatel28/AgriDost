{"ast":null,"code":"var _jsxFileName = \"/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/FarmDataChart.js\",\n  _s = $RefreshSig$();\n// FarmDataChart.js\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FarmDataChart = ({\n  userId\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n\n  // Function to fetch data from the backend API for the past two days\n  const fetchChartData = async () => {\n    try {\n      const response = await fetch(`/api/farm/${userId}/past-two-days`);\n      const result = await response.json();\n      if (result.length > 0) {\n        const feeds = result;\n\n        // Mapping the farm fields to the chart data\n        const temperatureData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: feed.temperature\n        }));\n        const soilMoistureData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: feed.soilMoisture\n        }));\n        const humidityData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: feed.humidity\n        }));\n        const motionDetectionData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: feed.motionDetected ? 1 : 0\n        }));\n\n        // Set the chart data state\n        setChartData({\n          datasets: [{\n            label: 'Temperature',\n            data: temperatureData,\n            borderColor: 'rgba(255, 99, 132, 1)',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderWidth: 1\n          }, {\n            label: 'Soil Moisture',\n            data: soilMoistureData,\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderWidth: 1\n          }, {\n            label: 'Humidity',\n            data: humidityData,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderWidth: 1\n          }, {\n            label: 'Motion Detection',\n            data: motionDetectionData,\n            borderColor: 'rgba(255, 159, 64, 1)',\n            backgroundColor: 'rgba(255, 159, 64, 0.2)',\n            borderWidth: 1\n          }]\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchChartData(); // Fetch chart data when the component mounts\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(FarmDataChart, \"w9TGTcQ41t1STf/TAA9S8/0Wwyc=\");\n_c = FarmDataChart;\nexport default FarmDataChart;\nvar _c;\n$RefreshReg$(_c, \"FarmDataChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","jsxDEV","_jsxDEV","FarmDataChart","userId","_s","chartData","setChartData","datasets","fetchChartData","response","fetch","result","json","length","feeds","temperatureData","map","feed","x","Date","timestamp","y","temperature","soilMoistureData","soilMoisture","humidityData","humidity","motionDetectionData","motionDetected","label","data","borderColor","backgroundColor","borderWidth","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/FarmDataChart.js"],"sourcesContent":["// FarmDataChart.js\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst FarmDataChart = ({ userId }) => {\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n\n  // Function to fetch data from the backend API for the past two days\n  const fetchChartData = async () => {\n    try {\n      const response = await fetch(`/api/farm/${userId}/past-two-days`);\n      const result = await response.json();\n\n      if (result.length > 0) {\n        const feeds = result;\n\n        // Mapping the farm fields to the chart data\n        const temperatureData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: feed.temperature\n        }));\n\n        const soilMoistureData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: feed.soilMoisture\n        }));\n\n        const humidityData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: feed.humidity\n        }));\n\n        const motionDetectionData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: feed.motionDetected ? 1 : 0\n        }));\n\n        // Set the chart data state\n        setChartData({\n          datasets: [\n            {\n              label: 'Temperature',\n              data: temperatureData,\n              borderColor: 'rgba(255, 99, 132, 1)',\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              borderWidth: 1\n            },\n            {\n              label: 'Soil Moisture',\n              data: soilMoistureData,\n              borderColor: 'rgba(54, 162, 235, 1)',\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\n              borderWidth: 1\n            },\n            {\n              label: 'Humidity',\n              data: humidityData,\n              borderColor: 'rgba(75, 192, 192, 1)',\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              borderWidth: 1\n            },\n            {\n              label: 'Motion Detection',\n              data: motionDetectionData,\n              borderColor: 'rgba(255, 159, 64, 1)',\n              backgroundColor: 'rgba(255, 159, 64, 0.2)',\n              borderWidth: 1\n            }\n          ]\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchChartData(); // Fetch chart data when the component mounts\n  }, [userId]);\n\n  return (\n    <div>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default FarmDataChart;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC;IACzCS,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAaP,MAAM,gBAAgB,CAAC;MACjE,MAAMQ,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAEpC,IAAID,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;QACrB,MAAMC,KAAK,GAAGH,MAAM;;QAEpB;QACA,MAAMI,eAAe,GAAGD,KAAK,CAACE,GAAG,CAACC,IAAI,KAAK;UACzCC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;UAC3BC,CAAC,EAAEJ,IAAI,CAACK;QACV,CAAC,CAAC,CAAC;QAEH,MAAMC,gBAAgB,GAAGT,KAAK,CAACE,GAAG,CAACC,IAAI,KAAK;UAC1CC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;UAC3BC,CAAC,EAAEJ,IAAI,CAACO;QACV,CAAC,CAAC,CAAC;QAEH,MAAMC,YAAY,GAAGX,KAAK,CAACE,GAAG,CAACC,IAAI,KAAK;UACtCC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;UAC3BC,CAAC,EAAEJ,IAAI,CAACS;QACV,CAAC,CAAC,CAAC;QAEH,MAAMC,mBAAmB,GAAGb,KAAK,CAACE,GAAG,CAACC,IAAI,KAAK;UAC7CC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;UAC3BC,CAAC,EAAEJ,IAAI,CAACW,cAAc,GAAG,CAAC,GAAG;QAC/B,CAAC,CAAC,CAAC;;QAEH;QACAtB,YAAY,CAAC;UACXC,QAAQ,EAAE,CACR;YACEsB,KAAK,EAAE,aAAa;YACpBC,IAAI,EAAEf,eAAe;YACrBgB,WAAW,EAAE,uBAAuB;YACpCC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE;UACf,CAAC,EACD;YACEJ,KAAK,EAAE,eAAe;YACtBC,IAAI,EAAEP,gBAAgB;YACtBQ,WAAW,EAAE,uBAAuB;YACpCC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE;UACf,CAAC,EACD;YACEJ,KAAK,EAAE,UAAU;YACjBC,IAAI,EAAEL,YAAY;YAClBM,WAAW,EAAE,uBAAuB;YACpCC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE;UACf,CAAC,EACD;YACEJ,KAAK,EAAE,kBAAkB;YACzBC,IAAI,EAAEH,mBAAmB;YACzBI,WAAW,EAAE,uBAAuB;YACpCC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE;UACf,CAAC;QAEL,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAEDrC,SAAS,CAAC,MAAM;IACdW,cAAc,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EAEZ,oBACEF,OAAA;IAAAmC,QAAA,eACEnC,OAAA,CAACF,IAAI;MAAC+B,IAAI,EAAEzB;IAAU;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAACpC,EAAA,CAnFIF,aAAa;AAAAuC,EAAA,GAAbvC,aAAa;AAqFnB,eAAeA,aAAa;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}