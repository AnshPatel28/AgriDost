{"ast":null,"code":"var _jsxFileName = \"/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/FarmDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport './FarmDashboard.css'; // Import CSS for styling\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst FarmDashboard = () => {\n  _s();\n  const [farmData, setFarmData] = useState([]); // Changed to empty array\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState('Ansh Patel'); // Default username\n\n  // Latest data state for each sensor\n  const [latestTemperature, setLatestTemperature] = useState(null);\n  const [latestSoilMoisture, setLatestSoilMoisture] = useState(null);\n  const [latestHumidity, setLatestHumidity] = useState(null);\n  const [latestMotionDetected, setLatestMotionDetected] = useState(null);\n\n  // Chart data for the graph\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const token = localStorage.getItem('token'); // Retrieve the token from localStorage\n    const userId = localStorage.getItem('userId'); // Retrieve the userId from localStorage\n    const storedUsername = localStorage.getItem('username');\n    if (token && userId) {\n      setIsLoggedIn(true);\n      setUsername(storedUsername || 'Ansh Patel'); // Set the username if available\n    } else {\n      // If no token or userId exists, simulate a default user\n      localStorage.setItem('token', 'default-token'); // Set a default token\n      localStorage.setItem('username', 'Ansh Patel');\n      localStorage.setItem('userId', 'default-user-id'); // Set a default user ID\n      setIsLoggedIn(true);\n      setUsername('Ansh Patel');\n    }\n    const fetchFarmData = async () => {\n      try {\n        if (!token || !userId) {\n          console.error('No token or userId found');\n          return;\n        }\n\n        // Validate that userId is a proper MongoDB ObjectId (24 hex characters)\n        if (userId.length !== 24) {\n          console.error('Invalid User ID format');\n          return;\n        }\n        const response = await axios.get(`/api/farm/${userId}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        const data = response.data;\n        setFarmData(data);\n\n        // Debugging: Log the fetched data\n        console.log('Fetched Farm Data:', data);\n\n        // Set latest sensor data\n        if (Array.isArray(data) && data.length > 0) {\n          const latestData = data[data.length - 1]; // Assume last item is the latest\n          setLatestTemperature(latestData.temperature);\n          setLatestSoilMoisture(latestData.soilMoisture);\n          setLatestHumidity(latestData.humidity);\n          setLatestMotionDetected(latestData.motionDetected);\n\n          // Debugging: Log the latest data\n          console.log('Latest Data:', latestData);\n\n          // Filter data for the past 2 days\n          const twoDaysAgo = new Date();\n          twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\n          const filteredData = data.filter(d => new Date(d.timestamp) >= twoDaysAgo);\n\n          // Prepare chart data\n          const labels = filteredData.map(d => new Date(d.timestamp).toLocaleString());\n          const temperatures = filteredData.map(d => d.temperature);\n          const soilMoistures = filteredData.map(d => d.soilMoisture);\n          const humidities = filteredData.map(d => d.humidity);\n          setChartData({\n            labels,\n            datasets: [{\n              label: 'Temperature (Â°C)',\n              data: temperatures,\n              borderColor: 'rgba(255, 99, 132, 1)',\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              fill: true,\n              tension: 0.4\n            }, {\n              label: 'Soil Moisture (%)',\n              data: soilMoistures,\n              borderColor: 'rgba(54, 162, 235, 1)',\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\n              fill: true,\n              tension: 0.4\n            }, {\n              label: 'Humidity (%)',\n              data: humidities,\n              borderColor: 'rgba(75, 192, 192, 1)',\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              fill: true,\n              tension: 0.4\n            }]\n          });\n        } else if (data) {\n          // Handle case where data is a single object\n          setLatestTemperature(data.temperature);\n          setLatestSoilMoisture(data.soilMoisture);\n          setLatestHumidity(data.humidity);\n          setLatestMotionDetected(data.motionDetected);\n\n          // Debugging: Log the single data object\n          console.log('Single Data Object:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching farm data', error);\n      }\n    };\n    fetchFarmData();\n\n    // Set interval to fetch the latest data every minute (60000ms)\n    const interval = setInterval(fetchFarmData, 60000);\n    return () => clearInterval(interval); // Clean up interval on component unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-left\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/logo.png\",\n          alt: \"Logo\",\n          className: \"navbar-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"navbar-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"About Us\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"Sensors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/farm-dashboard\",\n            children: \"Farm Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-right\",\n        children: isLoggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"navbar-username\",\n            children: username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), \" \"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Farm Data (Last 2 Days)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), chartData.labels ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: 'Temperature, Soil Moisture, and Humidity Over the Last 2 Days'\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading graph...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"raw-data-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Farm Data Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: farmData ? Array.isArray(farmData) ? farmData.map((data, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 19\n          }, this), \" \", new Date(data.timestamp).toLocaleString(), \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Temperature:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 19\n          }, this), \" \", data.temperature, \" \\xB0C |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Soil Moisture:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 19\n          }, this), \" \", data.soilMoisture, \" % |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Humidity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 19\n          }, this), \" \", data.humidity, \" % |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Motion Detected:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 19\n          }, this), \" \", data.motionDetected ? 'Yes' : 'No']\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), \" \", new Date(farmData.timestamp).toLocaleString(), \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Temperature:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this), \" \", farmData.temperature, \" \\xB0C |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Soil Moisture:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this), \" \", farmData.soilMoisture, \" % |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Humidity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this), \" \", farmData.humidity, \" % |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \" Motion Detected:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this), \" \", farmData.motionDetected ? 'Yes' : 'No']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(FarmDashboard, \"0SHBkTjgM78/E5F30pnf6cTN1Xo=\");\n_c = FarmDashboard;\nexport default FarmDashboard;\nvar _c;\n$RefreshReg$(_c, \"FarmDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","Link","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","register","FarmDashboard","_s","farmData","setFarmData","isLoggedIn","setIsLoggedIn","username","setUsername","latestTemperature","setLatestTemperature","latestSoilMoisture","setLatestSoilMoisture","latestHumidity","setLatestHumidity","latestMotionDetected","setLatestMotionDetected","chartData","setChartData","token","localStorage","getItem","userId","storedUsername","setItem","fetchFarmData","console","error","length","response","get","headers","data","log","Array","isArray","latestData","temperature","soilMoisture","humidity","motionDetected","twoDaysAgo","Date","setDate","getDate","filteredData","filter","d","timestamp","labels","map","toLocaleString","temperatures","soilMoistures","humidities","datasets","label","borderColor","backgroundColor","fill","tension","interval","setInterval","clearInterval","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","to","options","responsive","plugins","legend","position","title","display","text","index","_c","$RefreshReg$"],"sources":["/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/FarmDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport './FarmDashboard.css'; // Import CSS for styling\n\n// Register ChartJS components\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst FarmDashboard = () => {\n  const [farmData, setFarmData] = useState([]); // Changed to empty array\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState('Ansh Patel'); // Default username\n\n  // Latest data state for each sensor\n  const [latestTemperature, setLatestTemperature] = useState(null);\n  const [latestSoilMoisture, setLatestSoilMoisture] = useState(null);\n  const [latestHumidity, setLatestHumidity] = useState(null);\n  const [latestMotionDetected, setLatestMotionDetected] = useState(null);\n\n  // Chart data for the graph\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    const token = localStorage.getItem('token'); // Retrieve the token from localStorage\n    const userId = localStorage.getItem('userId'); // Retrieve the userId from localStorage\n    const storedUsername = localStorage.getItem('username');\n\n    if (token && userId) {\n      setIsLoggedIn(true);\n      setUsername(storedUsername || 'Ansh Patel'); // Set the username if available\n    } else {\n      // If no token or userId exists, simulate a default user\n      localStorage.setItem('token', 'default-token'); // Set a default token\n      localStorage.setItem('username', 'Ansh Patel');\n      localStorage.setItem('userId', 'default-user-id'); // Set a default user ID\n      setIsLoggedIn(true);\n      setUsername('Ansh Patel');\n    }\n\n    const fetchFarmData = async () => {\n      try {\n        if (!token || !userId) {\n          console.error('No token or userId found');\n          return;\n        }\n\n        // Validate that userId is a proper MongoDB ObjectId (24 hex characters)\n        if (userId.length !== 24) {\n          console.error('Invalid User ID format');\n          return;\n        }\n\n        const response = await axios.get(`/api/farm/${userId}`, {\n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n\n        const data = response.data;\n        setFarmData(data);\n\n        // Debugging: Log the fetched data\n        console.log('Fetched Farm Data:', data);\n\n        // Set latest sensor data\n        if (Array.isArray(data) && data.length > 0) {\n          const latestData = data[data.length - 1]; // Assume last item is the latest\n          setLatestTemperature(latestData.temperature);\n          setLatestSoilMoisture(latestData.soilMoisture);\n          setLatestHumidity(latestData.humidity);\n          setLatestMotionDetected(latestData.motionDetected);\n\n          // Debugging: Log the latest data\n          console.log('Latest Data:', latestData);\n\n          // Filter data for the past 2 days\n          const twoDaysAgo = new Date();\n          twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);\n\n          const filteredData = data.filter(d => new Date(d.timestamp) >= twoDaysAgo);\n\n          // Prepare chart data\n          const labels = filteredData.map(d => new Date(d.timestamp).toLocaleString());\n          const temperatures = filteredData.map(d => d.temperature);\n          const soilMoistures = filteredData.map(d => d.soilMoisture);\n          const humidities = filteredData.map(d => d.humidity);\n\n          setChartData({\n            labels,\n            datasets: [\n              {\n                label: 'Temperature (Â°C)',\n                data: temperatures,\n                borderColor: 'rgba(255, 99, 132, 1)',\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                fill: true,\n                tension: 0.4,\n              },\n              {\n                label: 'Soil Moisture (%)',\n                data: soilMoistures,\n                borderColor: 'rgba(54, 162, 235, 1)',\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                fill: true,\n                tension: 0.4,\n              },\n              {\n                label: 'Humidity (%)',\n                data: humidities,\n                borderColor: 'rgba(75, 192, 192, 1)',\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                fill: true,\n                tension: 0.4,\n              }\n            ]\n          });\n\n        } else if (data) {\n          // Handle case where data is a single object\n          setLatestTemperature(data.temperature);\n          setLatestSoilMoisture(data.soilMoisture);\n          setLatestHumidity(data.humidity);\n          setLatestMotionDetected(data.motionDetected);\n\n          // Debugging: Log the single data object\n          console.log('Single Data Object:', data);\n        }\n      } catch (error) {\n        console.error('Error fetching farm data', error);\n      }\n    };\n\n    fetchFarmData();\n\n    // Set interval to fetch the latest data every minute (60000ms)\n    const interval = setInterval(fetchFarmData, 60000);\n\n    return () => clearInterval(interval); // Clean up interval on component unmount\n  }, []);\n\n  return (\n    <div>\n      {/* Navbar implementation */}\n      <nav className=\"navbar\">\n        <div className=\"navbar-left\">\n          <img src=\"/images/logo.png\" alt=\"Logo\" className=\"navbar-logo\" />\n        </div>\n        <ul className=\"navbar-center\">\n          <li><Link to=\"/\">About Us</Link></li>\n          <li><Link to=\"/\">Sensors</Link></li>\n          <li><Link to=\"/farm-dashboard\">Farm Data</Link></li> {/* Farm Data link */}\n        </ul>\n        <div className=\"navbar-right\">\n          {isLoggedIn ? (\n            <>\n              <span className=\"navbar-username\">{username}</span> {/* Display username */}\n            </>\n          ) : (\n            <></>\n          )}\n        </div>\n      </nav>\n\n      {/* Graph Section */}\n      <div className=\"chart-section\">\n        <h2>Farm Data (Last 2 Days)</h2>\n        {chartData.labels ? (\n          <Line\n            data={chartData}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: 'top',\n                },\n                title: {\n                  display: true,\n                  text: 'Temperature, Soil Moisture, and Humidity Over the Last 2 Days',\n                },\n              },\n            }}\n          />\n        ) : (\n          <p>Loading graph...</p>\n        )}\n      </div>\n\n      {/* Cards Section */}\n      <div className=\"row\">\n        {/* Same Cards for latest data */}\n        {/* Cards for Temperature, Soil Moisture, Humidity, and Motion Detection */}\n        {/* ... */}\n      </div>\n\n      {/* Table to display raw data */}\n      <div className=\"raw-data-table\">\n        <h2>Farm Data Dashboard</h2>\n        <ul>\n          {farmData ? (\n            Array.isArray(farmData) ? (\n              farmData.map((data, index) => (\n                <li key={index}>\n                  <strong>Date:</strong> {new Date(data.timestamp).toLocaleString()} | \n                  <strong> Temperature:</strong> {data.temperature} Â°C | \n                  <strong> Soil Moisture:</strong> {data.soilMoisture} % | \n                  <strong> Humidity:</strong> {data.humidity} % | \n                  <strong> Motion Detected:</strong> {data.motionDetected ? 'Yes' : 'No'}\n                </li>\n              ))\n            ) : (\n              <li>\n                <strong>Date:</strong> {new Date(farmData.timestamp).toLocaleString()} | \n                <strong> Temperature:</strong> {farmData.temperature} Â°C | \n                <strong> Soil Moisture:</strong> {farmData.soilMoisture} % | \n                <strong> Humidity:</strong> {farmData.humidity} % | \n                <strong> Motion Detected:</strong> {farmData.motionDetected ? 'Yes' : 'No'}\n              </li>\n            )\n          ) : (\n            <p>Loading...</p>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default FarmDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}