{"ast":null,"code":"const fetchChartData = async () => {\n  try {\n    const userId = '6510f9bcf5a1a527b56a23e7'; // Example userId\n    const response = await fetch(`/api/farm/${userId}/past-two-days`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const result = await response.json();\n    if (result.success) {\n      const feeds = result.data;\n\n      // Mapping the ThingSpeak fields to the chart data\n      const temperatureData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        // use timestamp field from backend\n        y: parseFloat(feed.temperature)\n      }));\n      const soilMoistureData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: parseFloat(feed.soilMoisture)\n      }));\n      const humidityData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: parseFloat(feed.humidity)\n      }));\n      const motionDetectionData = feeds.map(feed => ({\n        x: new Date(feed.timestamp),\n        y: parseFloat(feed.motionDetected)\n      }));\n\n      // Set the chart data state\n      setChartData({\n        datasets: [{\n          label: 'Temperature',\n          data: temperatureData,\n          borderColor: 'rgba(255, 99, 132, 1)',\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderWidth: 1\n        }, {\n          label: 'Soil Moisture',\n          data: soilMoistureData,\n          borderColor: 'rgba(54, 162, 235, 1)',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderWidth: 1\n        }, {\n          label: 'Humidity',\n          data: humidityData,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderWidth: 1\n        }, {\n          label: 'Motion Detection',\n          data: motionDetectionData,\n          borderColor: 'rgba(255, 159, 64, 1)',\n          backgroundColor: 'rgba(255, 159, 64, 0.2)',\n          borderWidth: 1,\n          yAxisID: 'y1'\n        }]\n      });\n    }\n  } catch (error) {\n    console.error('Error fetching chart data:', error);\n  }\n};","map":{"version":3,"names":["fetchChartData","userId","response","fetch","ok","Error","status","result","json","success","feeds","data","temperatureData","map","feed","x","Date","timestamp","y","parseFloat","temperature","soilMoistureData","soilMoisture","humidityData","humidity","motionDetectionData","motionDetected","setChartData","datasets","label","borderColor","backgroundColor","borderWidth","yAxisID","error","console"],"sources":["/Users/pcompany/Desktop/Sem_VII/ET/AgriDost/frontend/src/components/FarmDataChart.js"],"sourcesContent":["const fetchChartData = async () => {\n    try {\n      const userId = '6510f9bcf5a1a527b56a23e7'; // Example userId\n      const response = await fetch(`/api/farm/${userId}/past-two-days`);\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n  \n      const result = await response.json();\n  \n      if (result.success) {\n        const feeds = result.data;\n  \n        // Mapping the ThingSpeak fields to the chart data\n        const temperatureData = feeds.map(feed => ({\n          x: new Date(feed.timestamp), // use timestamp field from backend\n          y: parseFloat(feed.temperature)\n        }));\n  \n        const soilMoistureData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: parseFloat(feed.soilMoisture)\n        }));\n  \n        const humidityData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: parseFloat(feed.humidity)\n        }));\n  \n        const motionDetectionData = feeds.map(feed => ({\n          x: new Date(feed.timestamp),\n          y: parseFloat(feed.motionDetected)\n        }));\n  \n        // Set the chart data state\n        setChartData({\n          datasets: [\n            {\n              label: 'Temperature',\n              data: temperatureData,\n              borderColor: 'rgba(255, 99, 132, 1)',\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              borderWidth: 1\n            },\n            {\n              label: 'Soil Moisture',\n              data: soilMoistureData,\n              borderColor: 'rgba(54, 162, 235, 1)',\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\n              borderWidth: 1\n            },\n            {\n              label: 'Humidity',\n              data: humidityData,\n              borderColor: 'rgba(75, 192, 192, 1)',\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              borderWidth: 1\n            },\n            {\n              label: 'Motion Detection',\n              data: motionDetectionData,\n              borderColor: 'rgba(255, 159, 64, 1)',\n              backgroundColor: 'rgba(255, 159, 64, 0.2)',\n              borderWidth: 1,\n              yAxisID: 'y1'\n            }\n          ]\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching chart data:', error);\n    }\n  };\n  "],"mappings":"AAAA,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAI;IACF,MAAMC,MAAM,GAAG,0BAA0B,CAAC,CAAC;IAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAaF,MAAM,gBAAgB,CAAC;IAEjE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAEpC,IAAID,MAAM,CAACE,OAAO,EAAE;MAClB,MAAMC,KAAK,GAAGH,MAAM,CAACI,IAAI;;MAEzB;MACA,MAAMC,eAAe,GAAGF,KAAK,CAACG,GAAG,CAACC,IAAI,KAAK;QACzCC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;QAAE;QAC7BC,CAAC,EAAEC,UAAU,CAACL,IAAI,CAACM,WAAW;MAChC,CAAC,CAAC,CAAC;MAEH,MAAMC,gBAAgB,GAAGX,KAAK,CAACG,GAAG,CAACC,IAAI,KAAK;QAC1CC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;QAC3BC,CAAC,EAAEC,UAAU,CAACL,IAAI,CAACQ,YAAY;MACjC,CAAC,CAAC,CAAC;MAEH,MAAMC,YAAY,GAAGb,KAAK,CAACG,GAAG,CAACC,IAAI,KAAK;QACtCC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;QAC3BC,CAAC,EAAEC,UAAU,CAACL,IAAI,CAACU,QAAQ;MAC7B,CAAC,CAAC,CAAC;MAEH,MAAMC,mBAAmB,GAAGf,KAAK,CAACG,GAAG,CAACC,IAAI,KAAK;QAC7CC,CAAC,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;QAC3BC,CAAC,EAAEC,UAAU,CAACL,IAAI,CAACY,cAAc;MACnC,CAAC,CAAC,CAAC;;MAEH;MACAC,YAAY,CAAC;QACXC,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,aAAa;UACpBlB,IAAI,EAAEC,eAAe;UACrBkB,WAAW,EAAE,uBAAuB;UACpCC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE;QACf,CAAC,EACD;UACEH,KAAK,EAAE,eAAe;UACtBlB,IAAI,EAAEU,gBAAgB;UACtBS,WAAW,EAAE,uBAAuB;UACpCC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE;QACf,CAAC,EACD;UACEH,KAAK,EAAE,UAAU;UACjBlB,IAAI,EAAEY,YAAY;UAClBO,WAAW,EAAE,uBAAuB;UACpCC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE;QACf,CAAC,EACD;UACEH,KAAK,EAAE,kBAAkB;UACzBlB,IAAI,EAAEc,mBAAmB;UACzBK,WAAW,EAAE,uBAAuB;UACpCC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,CAAC;UACdC,OAAO,EAAE;QACX,CAAC;MAEL,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}